/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'

// Create Virtual Routes

const MealsLazyImport = createFileRoute('/meals')()
const FoodLogLazyImport = createFileRoute('/food-log')()
const AddFoodLazyImport = createFileRoute('/add-food')()

// Create/Update Routes

const MealsLazyRoute = MealsLazyImport.update({
  path: '/meals',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/meals.lazy').then((d) => d.Route))

const FoodLogLazyRoute = FoodLogLazyImport.update({
  path: '/food-log',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/food-log.lazy').then((d) => d.Route))

const AddFoodLazyRoute = AddFoodLazyImport.update({
  path: '/add-food',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/add-food.lazy').then((d) => d.Route))

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/add-food': {
      id: '/add-food'
      path: '/add-food'
      fullPath: '/add-food'
      preLoaderRoute: typeof AddFoodLazyImport
      parentRoute: typeof rootRoute
    }
    '/food-log': {
      id: '/food-log'
      path: '/food-log'
      fullPath: '/food-log'
      preLoaderRoute: typeof FoodLogLazyImport
      parentRoute: typeof rootRoute
    }
    '/meals': {
      id: '/meals'
      path: '/meals'
      fullPath: '/meals'
      preLoaderRoute: typeof MealsLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/add-food': typeof AddFoodLazyRoute
  '/food-log': typeof FoodLogLazyRoute
  '/meals': typeof MealsLazyRoute
}

interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/add-food': typeof AddFoodLazyRoute
  '/food-log': typeof FoodLogLazyRoute
  '/meals': typeof MealsLazyRoute
}

interface FileRoutesById {
  '/': typeof IndexRoute
  '/add-food': typeof AddFoodLazyRoute
  '/food-log': typeof FoodLogLazyRoute
  '/meals': typeof MealsLazyRoute
}

interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/add-food' | '/food-log' | '/meals'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/add-food' | '/food-log' | '/meals'
  id: '/' | '/add-food' | '/food-log' | '/meals'
  fileRoutesById: FileRoutesById
}

interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AddFoodLazyRoute: typeof AddFoodLazyRoute
  FoodLogLazyRoute: typeof FoodLogLazyRoute
  MealsLazyRoute: typeof MealsLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AddFoodLazyRoute: AddFoodLazyRoute,
  FoodLogLazyRoute: FoodLogLazyRoute,
  MealsLazyRoute: MealsLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/add-food",
        "/food-log",
        "/meals"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/add-food": {
      "filePath": "add-food.lazy.tsx"
    },
    "/food-log": {
      "filePath": "food-log.lazy.tsx"
    },
    "/meals": {
      "filePath": "meals.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
